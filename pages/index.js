import Head from "next/head";
import HomeHeader from "../components/Home/HomeHeader";
import LatestAlerts from "../components/Home/LatestAlerts/LatestAlerts";
import RiskBreakDown from "../components/Home/RiskBreakDown/RiskBreakDown";
import Trend from "../components/Home/Trend/Trend";
import { GetCountries } from "../services/countriesService";
import styles from "../styles/Home.module.scss";
import { useState, useEffect } from "react";
import SearchBar from "../components/SearchInput";
import { getAlertsApi } from "../services/alertService";
import NextAndPrevBtn from "../components/widgets/NextAndPrevBtn/NextAndPrevBtn";

const DEFAULT_ALERT_INDEX = 0;
const DEFAULT_ALERT_COUNTRY = "canada";
export default function Home() {
  const [queries, searchQueries] = useState([]);
  const [currentAlert, setCurrentAlert] = useState({});
  const [currentCity, setCurrentCity] = useState({});
  const [alertCounts, setAlertCount] = useState(null);
  const [currentAlertIndex, setCurrentAlertIndex] = useState(0);
  const [alerts, setAlerts] = useState([]);
  const [lastAlertIndex, setLastAlertIndex] = useState(null);
  const [cities, setCities] = useState([]);
  const [disableNext, setDisableNext] = useState(false);
  const [disablePrev, setDisablePrev] = useState(true);

  useEffect(async () => {
    const countiesData = await GetCountries();
    searchQueries([...countiesData.countries, countiesData.cities]);
  }, []);

  useEffect(async () => {
    const fetchData = async () => {
      try {
        fetchAlerts(DEFAULT_ALERT_COUNTRY, currentAlertIndex);
      } catch (err) {
        console.log(err);
      }
    };
    fetchData();
  }, []);

  const fetchAlerts = async (location, alertIndex = 0) => {
    const feedAlertsData = await getAlertsApi(location);
    if (
      feedAlertsData &&
      feedAlertsData.alerts &&
      feedAlertsData.alerts.length > 0
    ) {
      setAlerts(feedAlertsData.alerts);
      setCities(feedAlertsData.cities);
      setCurrentCity(feedAlertsData.city);
      setLastAlertIndex(feedAlertsData.alerts.length);
      setCurrentAlert(feedAlertsData.alerts[alertIndex] || null);
      countAlertsTotalNumber(feedAlertsData.alerts);
      setCurrentAlertIndex(alertIndex);
    }
  };

  const countAlertsTotalNumber = (alerts) => {
    let alertsNumber = [];
    for (let index = 0; index < alerts.length; index++) {
      alertsNumber.push(index);
    }
    setAlertCount(alertsNumber);
  };

  const onClickNext = () => {
    let alertIndex = currentAlertIndex + 1;

    if (alertIndex === lastAlertIndex) {
      setDisableNext(true);
    }

    if (alertIndex < lastAlertIndex) {
      setCurrentAlertIndex(alertIndex);
      setCurrentAlert(alerts[alertIndex]);
      setDisablePrev(false);
    }
  };

  const onClickPrev = () => {
    let alertIndex = currentAlertIndex - 1;
    if (alertIndex === 0) {
      setDisablePrev(true);
    }
    if (alertIndex > -1) {
      setCurrentAlertIndex(alertIndex);
      setCurrentAlert(alerts[alertIndex]);
      setDisableNext(false);
    }
  };

  const onChangeText = async (value, enterEvent) => {
    if (value && enterEvent) {
      fetchAlerts(value, DEFAULT_ALERT_INDEX);
      setDisablePrev(true);
      setDisableNext(false);
    }
  };

  return (
    <div className={`${styles.homeContainer} `}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={"container"}>
        <HomeHeader></HomeHeader>
        <div className={styles.grid}>
          <div className={styles.searchInput} style={{ position: "relative" }}>
            <SearchBar items={queries} onChangeText={onChangeText}></SearchBar>
          </div>
          <div className={styles.reports}>
            <div className={styles.latestAlertsWrapper}>
              <div className={styles.reportsHeader}>
                <div className={styles.reportsHeaderTitleWrap}>
                  <p>Latest Alerts</p>
                </div>
                <div className={styles.prevNextWrapper}>
                  <NextAndPrevBtn
                    disablePrev={disablePrev}
                    onClickNext={onClickNext}
                    onClickPrev={onClickPrev}
                    disableNext={disableNext}
                  ></NextAndPrevBtn>
                </div>
              </div>
              <LatestAlerts
                city={currentCity}
                alert={currentAlert}
              ></LatestAlerts>
            </div>

            <div className={styles.trendAndRiskContainer}>
              <div className={styles.trendContainer}>
                <Trend alert={currentAlert}></Trend>
              </div>
              <div className={styles.riskBreakDownContainer}>
                <RiskBreakDown alert={currentAlert}></RiskBreakDown>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
